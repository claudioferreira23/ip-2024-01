QUESTAO 1

package main

import "fmt"

func main() {

	var pv int = 8
	var l int = 5
	var sp, sl, np, nl, mp, ml, nt float64
	var matricula, p int

	for i := 1; i <= pv; i++{
		fmt.Scan(&np)
		sp += np
	}
	for i := 1; i <= l; i++{
		fmt.Scan(&nl)
		sl += nl
	}

	fmt.Scan(&nt)

	mp = sp / 8
	ml = sl / 5
	nf := 0.7 * mp + 0.15 * ml + 0.15 * nt

	fmt.Scan(&p)

	ps := 75 / 100 * 128
	
	switch{
	case nf >= 6 && p >= ps:
		fmt.Printf("Matricula: %d, Nota Final: %.2f, Situacao Final: APROVADO", matricula, nf)
	case nf >= 6 && p < ps:
		fmt.Printf("Matricula: %d, Nota Final: %.2f, Situacao Final: REPROVADO POR FREQUENCIA", matricula, nf)
	case nf < 6 && p >= ps:
		fmt.Printf("Matricula: %d, Nota Final: %.2f, Situacao Final: REPROVADO POR NOTA,", matricula, nf)
	case nf < 6 && p < ps:
		fmt.Printf("Matricula: %d, Nota Final: %.2f, Situacao Final: REPROVADO POR NOTA E POR FREQUENCIA", matricula, nf)
	}
}


QUESTAO 2

package main

import "fmt"

func main() {
    var pA, pB int
    fmt.Scanln(&pA)
    fmt.Scanln(&pB)

    anos := calcularAnos(pA, pB)
    fmt.Printf("ANOS = %d\n", anos)
}

func calcularAnos(pA, pB int) int {
    anos := 0
    for pA <= pB {
        pA = pA + (pA * 3 / 100)
        pB = pB + (pB * 15 / 1000)
        anos++
    }
    return anos
}


QUESTAO 3

package main

import "fmt"

func main() {

	var n int

	fmt.Scan(&n)

	fatorial := 1

	for i := 2; i <= n; i++{
		fatorial *= i
	}
	fmt.Printf("%d! = %d", n, fatorial)
}

QUESTAO 4

package main

import "fmt"

func main() {

	var n, y, k int
	var s, inc, soma, sub, mut, div float64

	fmt.Scan(&n, &y, &k, &s)

	fmt.Print("Tabuada de soma:\n")
	inc = float64(y) - s
	for i := 1; i <= k; i++{
		inc += s
		soma = float64(n) + inc
		fmt.Printf("%.2f + %.2f = %.2f\n", float64(n), inc, soma)
	}

	fmt.Print("Tabuada de subtracao:\n")
	inc = float64(y) - s
 	for i := 1; i <= k; i++{
		inc += s
		sub = float64(n) - inc
		fmt.Printf("%.2f - %.2f = %.2f\n", float64(n), inc, sub)
	}

	fmt.Print("Tabuada de multiplicacao:\n")
	inc = float64(y) - s
 	for i := 1; i <= k; i++{
		inc += s
		mut = float64(n) * inc
		fmt.Printf("%.2f * %.2f = %.2f\n", float64(n), inc, mut)
	}

	fmt.Print("Tabuada de divisao:\n")
	inc = float64(y) - s
 	for i := 1; i <= k; i++{
		inc += s
		div = float64(n) / inc
		fmt.Printf("%.2f / %.2f = %.2f\n", float64(n), inc, div)
	}
}


QUESTAO 5

package main

import (
    "fmt"
)

func main() {
    var n, atual, anterior, max, count int

    fmt.Scan(&n)
    
    max = 0
    count = 0

    for i := 0; i < n; i++ {
        fmt.Scan(&atual)

        if i > 0 {
            if atual > anterior {
                count++
            } else {
                if count > max {
                    max = count
                }
                count = 0
            }
        }

        anterior = atual
    }

    if count > max {
        max = count
    }

    fmt.Printf("O comprimento do segmento crescente maximo e: %d\n", max)
}



QUESTAO 6

package main

import "fmt"


func main() {
    var n int
    fmt.Scanln(&n)

    sequencia := make([]int, n)
    for i := 0; i < n; i++ {
        fmt.Scan(&sequencia[i])
    }

    maiorSubsequencia := calcularSubsequencia(sequencia)

    fmt.Printf("A maior subsequência de elementos iguais possui %d elementos.\n", maiorSubsequencia)
}

func calcularSubsequencia(sequencia []int) int {
    if len(sequencia) == 0 {
        return 0
    }

    contadorMax := 1
    contadorAtual := 1

    for i := 1; i < len(sequencia); i++ {
        if sequencia[i] == sequencia[i-1] {
            contadorAtual++
            if contadorAtual > contadorMax {
                contadorMax = contadorAtual
            }
        } else {
            contadorAtual = 1
        }
    }

    return contadorMax
}


QUESTAO 7

package main

import (
    "fmt"
)

func main() {
    var n, npar, nimpar int
    var somap, somai float64

    for {
        fmt.Scan(&n)
        if n == 0 {
            break
        }
        if n%2 == 0 {
			npar++
            somap += float64(n)
        } else {
            nimpar++
            somai += float64(n)
        }
    }

    mediaPar := somap / float64(npar)
    mediaImpar := somai / float64(nimpar)

    fmt.Printf("MEDIA PAR = %.2f\n", mediaPar)
    fmt.Printf("MEDIA IMPAR = %.2f\n", mediaImpar)
}


QUESTAO 8

package main

import (
    "fmt"
)

func main() {
    var n int
    fmt.Scanln(&n)

    if n < 2 {
        fmt.Println("Campeonato invalido!")
    } else {
        imprimirFinais(n)
    }
}

func imprimirFinais(n int) {
    contador := 1
    for i := 1; i <= n; i++ {
        for j := i + 1; j <= n; j++ {
            fmt.Printf("Final %d: Time%d X Time%d\n", contador, i, j)
            contador++
        }
    }
}


QUESTAO 9

package main

import "fmt"

func main() {
    var n int
    
    fmt.Print("Digite um numero:")
    fmt.Scan(&n)
    
    switch {
        case n < 0:
        fmt.Print("NUMERO INVALIDO")
        case n == 2:
        fmt.Print("PRIMO")
        case n == 3:
        fmt.Print("PRIMO")
        case (n %2 == 0) || (n %3 == 0):
        fmt.Print("NAO PRIMO")
        case !(n %2 == 0) || !(n %3 == 0):
        fmt.Print("PRIMO")
    }
}  


QUESTAO 10

package main

import (
    "fmt"
)

func main() {
    for {
        var matricula int
        var htrabalho int
        var vhora float64

        fmt.Scan(&matricula, &htrabalho, &vhora)

        if matricula == 0 {
            break
        }

        salario := float64(htrabalho) * vhora

        fmt.Printf("%d %.2f\n", matricula, salario)
    }
}


QUESTAO 11

package main

import(
	"fmt"
	"math"
)

func main() {
	var n, e float64
	fmt.Scan(&n)
	fmt.Scan(&e)

	r0 := 1.0
	erro := math.Abs(n - r0*r0)

	for erro > e {
		r0 = (r0 + n/r0) / 2
		erro = math.Abs(n - r0*r0)
		fmt.Printf("r: %.9f, erro: %.9f\n", r0, erro)
	}
}


QUESTAO 13

package main

import "fmt"

func main() {
    var n, x int
    
    fmt.Println("Digite um numero inteiro:")
    fmt.Scanln(&n)
    
    x = ((n * 2) * 32 + 32 * n) - n
    
    fmt.Print(x)
}


QUESTAO 14

package main

import "fmt"

func main() {
	var m, n int

	fmt.Scan(&m, &n)

	for i := 2; i <= m; i++ {
		for j := 1; j <= n && j < i; j++ {
			fmt.Printf("(%d,%d)", i, j)

			if j < i-1 {
				fmt.Print("-")
			}
		}
		fmt.Println()
	}
}


QUESTAO 15

package main

import (
	"fmt"
	"strconv"
)

func main() {
	var T int
	fmt.Scanln(&T)

	for i := 0; i < T; i++ {
		var A, B int
		fmt.Scanln(&A, &B)
		inverterA := reverseNumber(A)
		inverterB := reverseNumber(B)

		if inverterA > inverterB {
			fmt.Println(inverterA)
		} else {
			fmt.Println(inverterB)
		}
	}
}

func reverseNumber(num int) int {
	str := strconv.Itoa(num)
	reversed := ""
	for i := len(str) - 1; i >= 0; i-- {
		reversed += string(str[i])
	}
	reversedNum, _ := strconv.Atoi(reversed)
	return reversedNum
}


QUESTAO 16

package main

import (
	"fmt"
	"math"
)

func main() {
	var n int
	fmt.Scanln(&n)

	for h := 1; h <= n; h++ {
		for c1 := 1; c1 < h; c1++ {
			c2 := int(math.Sqrt(float64(h*h - c1*c1)))
			if c1*c1+c2*c2 == h*h && c2 <= n {
				fmt.Printf("hipotenusa = %d, catetos %d e %d\n", h, c1, c2)
			}
		}
	}
}


QUESTAO 19

package main

import "fmt"

func main() {
	var m int
	fmt.Println("Digite um número inteiro maior que zero:")
	fmt.Scan(&m)

	for n := 1; n <= m; n++ {
		fmt.Printf("%d*%d*%d = ", n, n, n)

		primeiroImpar := (n - 1) * n + 1

		for i := 0; i < n; i++ {
			if i > 0 {
				fmt.Print("+")
			}
			fmt.Print(primeiroImpar + 2*i)
		}

		fmt.Println()
	}
}


QUESTAO 20

package main

import "fmt"

func main() {
    var n, soma int
    fmt.Println("Digite um número inteiro maior que 1:")
    fmt.Scan(&n)

    fmt.Printf("%d = ", n)
    for i := 1; i < n; i++ {
        if n%i == 0 {
            if soma > 0 {
                fmt.Print(" + ")
            }
            fmt.Print(i)
            soma += i
        }
    }

    if soma == n {
        fmt.Printf(" = %d (NUMERO PERFEITO)\n", n)
    } else {
        fmt.Printf(" = %d (NUMERO NAO E PERFEITO)\n", soma)
    }
}


QUESTAO 21

package main

import "fmt"


func main() {
	var n int
	for {
		fmt.Scan(&n)
		if n == 0 {
			break
		}
		seq := make([]float64, n)
		for i := 0; i < n; i++ {
			fmt.Scan(&seq[i])
		}
		ordenada := true
		for i := 1; i < n; i++ {
			if seq[i-1] >= seq[i] {
				ordenada = false
				break
			}
		}
		if ordenada {
			fmt.Println("ORDENADA")
		} else {
			fmt.Println("DESORDENADA")
		}
	}
}


QUESTAO 23

package main

import "fmt"

func somadivisores(n int) int {
	soma := 1 

	for i := 2; i*i <= n; i++ {
		if n%i == 0 {
	soma += i
			if n/i != i {
				soma += n / i
			}
		}
	}

	return soma
}

func encontreparesamigos(n int) [][]int {
	pares := make([][]int, 0)
	verificados := make(map[int]bool)

	for i := 2; len(pares) < n; i++ {
		if verificados[i] || i == somadivisores(i) || i < somadivisores(i) {
			continue
		}

		soma := somadivisores(i)
		if i == somadivisores(soma) {
			pares = append(pares, []int{i, soma})
			verificados[i] = true
			verificados[soma] = true
		}
	}

	return pares
}

func main() {
	var n int
	fmt.Println("Digite um número inteiro positivo:")
	fmt.Scan(&n)

	pares := encontreparesamigos(n)

	fmt.Println("Os pares de números amigos são:")
	for _, par := range pares {
		fmt.Printf("(%d,%d)\n", par[1], par[0])
	}
}


QUESTAO 24

package main

import (
	"fmt"
	"math"
)

func fatorial(n int) float64 {
	if n <= 1 {
		return 1
	}
	return float64(n) * fatorial(n-1)
}

func cosseno(x float64, N int) float64 {
	resultado := 1.0
	sinal := -1.0

	for n := 1; n <= N; n++ {
		termo := math.Pow(x, float64(2*n)) / fatorial(2*n)
		resultado += sinal * termo
		sinal *= -1.0
	}

	return resultado
}

func main() {
	var x float64
	var N int

	fmt.Println("Digite o ângulo em radianos e a quantidade de termos:")
	fmt.Scan(&x, &N)

	cosX := cosseno(x, N)

	fmt.Printf("cos(%.2f) = %.6f\n", x, cosX)
}


QUESTAO 25

package main

import "fmt"

func fatorial(n int) float64 {
	if n <= 1 {
		return 1
	}
	return float64(n) * fatorial(n-1)
}

func exponencial(x float64, N int) float64 {
	resultado := 1.0

	for n := 1; n <= N; n++ {
		termo := (power(x, n) / fatorial(n))
		resultado += termo
	}

	return resultado
}

func power(x float64, n int) float64 {
	result := 1.0

	for i := 1; i <= n; i++ {
		result *= x
	}

	return result
}

func main() {
	var x float64
	var N int

	fmt.Println("Digite o expoente e a quantidade de termos:")
	fmt.Scan(&x, &N)

	ex := exponencial(x, N)

	fmt.Printf("e^%.2f = %.6f\n", x, ex)
}


QUESTAO 26

package main

import (
	"fmt"
	"math"
)

func fatorial(n int) float64 {
	if n <= 1 {
		return 1
	}
	return float64(n) * fatorial(n-1)
}

func seno(x float64, N int) float64 {
	resultado := 0.0

	for n := 0; n <= N; n++ {
		termo := math.Pow(-1, float64(n)) * math.Pow(x, float64(2*n+1)) / fatorial(2*n+1)
		resultado += termo
	}

	return resultado
}

func main() {
	var x float64
	var N int

	fmt.Println("Digite o ângulo em radianos e a quantidade de termos:")
	fmt.Scan(&x, &N)

	senX := seno(x, N)

	fmt.Printf("seno(%.2f) = %.6f\n", x, senX)
}


QUESTAO 27

package main

import "fmt"

func main() {
	for {
		var n int
		fmt.Scanln(&n)

		if n <= 1 {
			fmt.Printf("Fatoracao nao e possivel para o numero %d!\n", n)
			continue
		}

		fmt.Printf("%d = ", n)
		fatoracaoPrimos(n)
		fmt.Println()
	}
}

func fatoracaoPrimos(n int) {
	divisor := 2
	for n > 1 {
		if n%divisor == 0 {
			fmt.Printf("%d", divisor)
			n /= divisor
			if n > 1 {
				fmt.Printf(" x ")
			}
		} else {
			divisor++
		}
	}
}
